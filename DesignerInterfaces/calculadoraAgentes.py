# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'interfaceCalculadora.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from osbrain import run_agent
from osbrain import run_nameserver
from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.comboBox = QtWidgets.QComboBox(self.centralwidget)
        self.comboBox.setGeometry(QtCore.QRect(170, 190, 75, 22))
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.comboBox.addItem("")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(170, 290, 75, 23))
        self.pushButton.setObjectName("pushButton")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit.setGeometry(QtCore.QRect(40, 170, 104, 64))
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.plainTextEdit_2 = QtWidgets.QPlainTextEdit(self.centralwidget)
        self.plainTextEdit_2.setGeometry(QtCore.QRect(270, 170, 104, 64))
        self.plainTextEdit_2.setObjectName("plainTextEdit_2")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 20))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.comboBox.setItemText(0, _translate("MainWindow", "+"))
        self.comboBox.setItemText(1, _translate("MainWindow", "-"))
        self.comboBox.setItemText(2, _translate("MainWindow", "*"))
        self.comboBox.setItemText(3, _translate("MainWindow", "/"))
        self.pushButton.setText(_translate("MainWindow", "Calcular!"))
        self.plainTextEdit.setPlainText(
            _translate("MainWindow", "1"))
        self.plainTextEdit_2.setPlainText(
            _translate("MainWindow", "1"))

    def getOperation(self):
        return self.plainTextEdit.toPlainText() + " " + self.comboBox.currentText() + " " + self.plainTextEdit_2.toPlainText()

    def getComboBox(self):
        return self.comboBox.currentText()

#     def getOperationResult(self, agent, message):
# # Separar números e operador em uma lista
#     operadores = message.split()

#     # Checar se a operação desejada é uma soma
#     if operadores[1] == "+":
#         resultado = int(operadores[0]) + int(operadores[2])

#         # Enviar mensagem
#         agent.log_info(
#             "{} + {} = {}".format(operadores[0], operadores[2], resultado))


def somar(agent, message):
    # Separar números e operador em uma lista
    operadores = message.split()

    # Checar se a operação desejada é uma soma
    if operadores[1] == "+":
        resultado = int(operadores[0]) + int(operadores[2])

        # Enviar mensagem
        agent.log_info(
            "{} + {} = {}".format(operadores[0], operadores[2], resultado))


def subtrair(agent, message):
    # Separar números e operador em uma lista
    operadores = message.split()

    # Checar se a operação desejada é uma soma
    if operadores[1] == "-":
        resultado = int(operadores[0]) - int(operadores[2])

        # Enviar mensagem
        agent.log_info(
            "{} - {} = {}".format(operadores[0], operadores[2], resultado))


def multiplicar(agent, message):
 # Separar números e operador em uma lista
    operadores = message.split()

    # Checar se a operação desejada é uma soma
    if operadores[1] == "*":
        resultado = int(operadores[0]) * int(operadores[2])

        # Enviar mensagem
        agent.log_info(
            "{} * {} = {}".format(operadores[0], operadores[2], resultado))


def dividir(agent, message):
 # Separar números e operador em uma lista
    operadores = message.split()

    # Checar se a operação desejada é uma soma
    if operadores[1] == "/":
        resultado = int(operadores[0]) / int(operadores[2])

        # Enviar mensagem
        agent.log_info(
            "{} / {} = {}".format(operadores[0], operadores[2], resultado))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    # Inicialização do nameserver e agentes
    ns = run_nameserver()
    publisher = run_agent("Publisher")
    mais = run_agent("Mais")
    menos = run_agent("Menos")
    vezes = run_agent("Vezes")
    divisao = run_agent("Divisao")

    # Criando um endereço de comunicação publish-subscribe
    address = publisher.bind("PUB")
    # Conectando os agentes ao endereço de comunicação e atribuindo os comportamentos
    mais.connect(address, handler=somar)
    menos.connect(address, handler=subtrair)
    vezes.connect(address, handler=multiplicar)
    divisao.connect(address, handler=dividir)

    # Input dos parâmetros
    mensagem = Ui_MainWindow.getOperation(ui)
    print(mensagem)
    # Envio da mensagem
    publisher.send(address, mensagem)

    ns.shutdown()
    sys.exit(app.exec_())
